function [A, B,Xc,Yc,s, Shape] = shape(I)
Ig = rgb2gray(I);

Ie = edge(Ig,'canny',0.1);
t = graythresh(Ig);
Ibin = imbinarize(Ig,'adaptive','ForegroundPolarity','dark','Sensitivity',t);
% [centers , radii]= imfindcircles(I, [10 700])
% 
 figure
 imshow(Ie);
 title("Edge Detection")
 figure
 imshow(Ibin);
 title("Binarized Image")
 hold on
 
%     viscircles(centers, radii,'EdgeColor','b');
%     
    s = regionprops(Ie,{...
    'Centroid',...
    'MajorAxisLength',...
    'MinorAxisLength',...
    'Orientation'})
   
t = linspace(0,2*pi,50);
i = 1;
flag =0;
for n = 1:length(s)
    if((s(n).MajorAxisLength <= length(Ibin(:,1)) && s(n).MajorAxisLength <= length(Ibin(1,:))))
        if(s(n).MajorAxisLength > length(Ibin(:,1))*0.05 && s(n).MajorAxisLength > length(Ibin(1,:))*0.05)
            s_norm(i) = s(n);
            i = i +1;
            flag = 1;
        end
    end
end

if(flag== 0)
    s_norm = [];
end
if(~isempty(s_norm))
    for k = 1:length(s_norm)
        A(k) = s_norm(k).MajorAxisLength/2;
        B(k) = s_norm(k).MinorAxisLength/2;
        Xc(k) = s_norm(k).Centroid(1);
        Yc(k) = s_norm(k).Centroid(2);
        phi = deg2rad(-s_norm(k).Orientation);
        x = Xc(k) + A(k)*cos(t)*cos(phi) - B(k)*sin(t)*sin(phi);
        y = Yc(k) + A(k)*cos(t)*sin(phi) + B(k)*sin(t)*cos(phi);
        plot(x,y,'r','Linewidth',5)
    end
else
    A = [0];
    B = [0];
    Xc= [0];
    Yc= [0];
end
hold off


[value, index] = max(B);
axisRatio = A(index)/B(index);

axisBig = 0;
if(~isempty(A) )
    Shape = 0; % No shape
elseif(axisBig > 1.4)
    Shape = 2; %Ellipse
elseif(axisBig <=1.4)
    Shape = 1; %CIRCLE
else 
    Shape = -1;
end
end
